(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{545:function(s,t,a){"use strict";a.r(t);var n=a(6),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"多任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多任务"}},[s._v("#")]),s._v(" 多任务")]),s._v(" "),a("ol",[a("li",[s._v("多任务介绍")])]),s._v(" "),a("p",[s._v("例如： 百度网盘同时下载多个文件或视频。")]),s._v(" "),a("p",[s._v("好处： 充分利用 CPU 资源，提高程序的执行效率")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("多任务 2 种表现形式")])]),s._v(" "),a("ul",[a("li",[s._v("并发 （在一段时间内 交替 去执行多个任务）")])]),s._v(" "),a("p",[s._v("例子： 对于单核 cpu 处理多任务，操作系统会轮流让各个任务"),a("strong",[s._v("交替执行")])]),s._v(" "),a("ul",[a("li",[s._v("并行 (同时执行多个任务)")])]),s._v(" "),a("h2",{attrs:{id:"多进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程"}},[s._v("#")]),s._v(" 多进程")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("进程")]),s._v(" "),a("ul",[a("li",[s._v("通俗理解： 一个正在进行的程序就是一个进程。例如：正在允许的 QQ 或 微信。")])])]),s._v(" "),a("li",[a("p",[s._v("多进程")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("程序运行会默认创建一个进程，这个默认创建的进程称为 "),a("strong",[s._v("主进程")])])]),s._v(" "),a("li",[a("p",[s._v("程序运行后又创建一个进程，这个称为 "),a("strong",[s._v("子进程")])])])])]),s._v(" "),a("li",[a("p",[s._v("多进程完成多任务")]),s._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 导入进程包\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" multiprocessing\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 通过进程类创建进程对象\n进程对象xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" multiprocessing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("任务名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    args 进行执行需要携带参数时。（以元组的方式给任务传参）\n    kwargs 进行执行需要携带参数时。（以字典的方式给任务传参）\n    name 进程名，一般不用设置\n    group 进程组，目前只能使用"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 启动进程执行任务\n进程对象xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("关于进程编号")]),s._v(" "),a("ul",[a("li",[s._v("进程编号的作用： 当程序的数量越来越多时，如果没有办法区分主进程和子进程还有不同的子进程， 那么就无法进行有效的进程管理，为了方便管理实际上每个进程都是有自己的编号。")])]),s._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 获取当前进程编号\n\npid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getpid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 获取当前父进程编号 （创建进程的 父进程）\n\nppid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getppid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("多进程的注意点")]),s._v(" "),a("ul",[a("li",[s._v("主进程会等待使用子进程执行结合再结束")])]),s._v(" "),a("p",[s._v("现在我们要 "),a("strong",[s._v("主进程退出后，子进程直接销毁，不再执行子进程的代码")]),s._v("。 我们需要设置 "),a("strong",[s._v("守护主进程")]),s._v("。 只需要给 子进程下的 daemon 的属性设置为 True 即可。")]),s._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建 子进程 后")]),s._v("\nxxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" multiprocessing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("任务名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置 守护主进程")]),s._v("\nxxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("daemon "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动进程")]),s._v("\nxxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[s._v("#")]),s._v(" 多线程")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("线程")]),s._v(" "),a("p",[s._v("线程是"),a("strong",[s._v("程序执行最小单位")]),s._v("， 实际上进程只负责分配资源， 而利用这些资源执行程序的是线程， 也就是说进程是线程的容器， "),a("strong",[s._v("一个进程中最少有一个线程来")]),s._v("负责执行程序，同时线程自己不拥有系统资源， 只需要一点儿再运行中必不可少的资源，但它可与同属一个进程的其他线程"),a("strong",[s._v("共享进程所用有的全部资源")]),s._v("。 这就像一个 QQ 软件（一个进程）打开两个窗口（两个线程）和两个人聊天一样， 实现多任务的同时也节省了资源。")])]),s._v(" "),a("li",[a("p",[s._v("多线程的作用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在进程中默认会有一个线程用来执行程序， 这个线程称为"),a("strong",[s._v("主线程")])])]),s._v(" "),a("li",[a("p",[s._v("在进程中创建一个新的线程，这个线程称为"),a("strong",[s._v("子线程")])])])])]),s._v(" "),a("li",[a("p",[s._v("多线程实现多任务")]),s._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 导入线程模块\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" threading\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 通过线程类创建线程对象\n线程对象xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" threading"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("任务名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   args 进行执行需要携带参数时。（以元组的方式给任务传参）\n   kwargs 进行执行需要携带参数时。（以字典的方式给任务传参）\n   name 进程名，一般不用设置\n   group 进程组，目前只能使用"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 启动线程执行任务\n线程对象xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("主线程和子线程的结束顺序")]),s._v(" "),a("p",[s._v("对比进程：")]),s._v(" "),a("ul",[a("li",[s._v("主线程会等待所有子线程执行结束后主线程在结束")])]),s._v(" "),a("p",[s._v("设置守护主线程： 实现主线程不等待子线程程序执行完再结束")]),s._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 设置守护主线程：方式 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 在创建线程设置 daemon "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n 线程对象 xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" threading"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 任务名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" daemon "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 设置守护主线程： 方式 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 在创建线程后 设置 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setDaemon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n 线程对象 xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setDaemon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("线程之间的执行顺序")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("是无序的")])]),s._v(" "),a("li",[a("p",[s._v("获取当前线程的对象")]),s._v(" "),a("ul",[a("li",[s._v("通过 .current_thread() 方法获取线程对象 thread = threading.current_thread()")])])])])])]),s._v(" "),a("h2",{attrs:{id:"进程和线程对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程对比"}},[s._v("#")]),s._v(" 进程和线程对比")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("关系对比")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("线程是依附在进程里面的， 没有进程就没有线程")])]),s._v(" "),a("li",[a("p",[s._v("一个进程默认提供一条线程， 进程可以创建多个线程")])])])]),s._v(" "),a("li",[a("p",[s._v("区别对比")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("创建进程的资源开销要比创建线程的资源开销大")])]),s._v(" "),a("li",[a("p",[s._v("进程是操作系统资源分配的基本单位， 线程是 CPU 调度的基本单位")])]),s._v(" "),a("li",[a("p",[s._v("线程不能够独立执行， 必须依存在进程中")])])])]),s._v(" "),a("li",[a("p",[s._v("优缺点对比")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("进程")]),s._v(" "),a("ul",[a("li",[s._v("优点： 可以用多核")]),s._v(" "),a("li",[s._v("缺点： 资源开销大")])])]),s._v(" "),a("li",[a("p",[s._v("线程")]),s._v(" "),a("ul",[a("li",[s._v("优点： 资源开销小")]),s._v(" "),a("li",[s._v("缺点： 不能使用多核")])])])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);