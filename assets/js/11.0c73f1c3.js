(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{505:function(t,_,v){"use strict";v.r(_);var e=v(6),a=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"git-本地仓库和远程仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-本地仓库和远程仓库"}},[t._v("#")]),t._v(" git 本地仓库和远程仓库")]),t._v(" "),v("p",[t._v("本地仓库：")]),t._v(" "),v("p",[t._v("存放在本机中的仓库，每台计算机都有本地仓库，本地仓库又可以细分为三个概念，分别是"),v("strong",[t._v("工作区，暂存区和本地库")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("工作区，带.git 文件的文件夹就可以看做是一个工作区，也可以将写代码的地方看成工作区。")])]),t._v(" "),v("li",[v("p",[t._v("暂存区，它是一个隐式的概念，工作区中的文件会添加到暂存区。")])]),t._v(" "),v("li",[v("p",[t._v("本地库，本地库就是本地仓库中用于存放文件和版本管理的地方，暂存区会将文件提交到本地库当中。")])])]),t._v(" "),v("p",[t._v("远程仓库：")]),t._v(" "),v("p",[t._v("对于一个团队来说，每个成员都有自己的本地库，那之间怎么进行通信交互呢？就是通过远程仓库来通信交互的（A 将文件推送到远程仓库，B 可以从远程仓库上将 A 推送的文件拉取下来），大名鼎鼎的 github 就是一个远程仓库，中国的 gitee 码云也是一个远程仓库，企业中用的更多的其实是一个被称为 gitlab 的远程仓库。")]),t._v(" "),v("h2",{attrs:{id:"本地仓库中常见操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#本地仓库中常见操作"}},[t._v("#")]),t._v(" 本地仓库中常见操作")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("初始化工作区 "),v("code",[t._v("git init")]),t._v(" 将所在目录初始化为工作区")])]),t._v(" "),v("li",[v("p",[t._v("设置签名（需要先设置好我们的签名，用于标识操作人）")])])]),t._v(" "),v("blockquote",[v("p",[t._v("系统签名的作用域是电脑，设置一次处处生效，项目签名的作用域为当前的工作区，仅在当前工作区有效。（项目签名优先级大于系统签名，如果两者都存在则以项目签名为准）")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("项目签名：设置用户名 :"),v("code",[t._v("git config user.name<用户名>")]),t._v(" ，设置邮箱号: "),v("code",[t._v("git config user.email<邮箱>")])])]),t._v(" "),v("li",[v("p",[t._v("系统签名的设置：设置用户名: "),v("code",[t._v("git config --global user.name <用户名>")]),t._v(" ，设置邮箱号: "),v("code",[t._v("git config --global user.email<邮箱>")])])])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("p",[t._v("添加文件 "),v("code",[t._v("git add <文件名>")]),t._v(" 将文件添加到暂存区当中")])]),t._v(" "),v("li",[v("p",[t._v("提交文件 "),v("code",[t._v("git commit -m '备注信息'")]),t._v(" 将文件从暂存区中提交到本地库")])])]),t._v(" "),v("h2",{attrs:{id:"本地仓库的版本前进-、-后退"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#本地仓库的版本前进-、-后退"}},[t._v("#")]),t._v(" 本地仓库的版本前进 、 后退")]),t._v(" "),v("p",[t._v("对于本地仓库而言，每一次提交的成功执行，就意味着一个新版本的生成，git 会将这些版本给保存起来。")]),t._v(" "),v("p",[t._v("首先需要查看版本详细信息，通过"),v("code",[t._v("git reflog")]),t._v(" 命令可以查看到所有版本的信息。第一列它会显示一个索引号，这个索引号其实是一个 hash 值，每个版本都会对应一个 hash 值，我们可以通过这个 hash 来进行版本的切换。")]),t._v(" "),v("ul",[v("li",[t._v("切换到指定的版本: "),v("code",[t._v("git reset --hard 索引号")])])]),t._v(" "),v("h2",{attrs:{id:"删除文件的恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除文件的恢复"}},[t._v("#")]),t._v(" 删除文件的恢复")]),t._v(" "),v("p",[t._v("git 支持文件的恢复操作，不过前提是想要恢复的文件必须之前已经提交到本地仓库当中。")]),t._v(" "),v("ol",[v("li",[v("p",[v("code",[t._v("git reset --hard 索引号")]),t._v(" 跳转到文件删除前的版本")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git restore 文件名")]),t._v(" 撤销对这个文件的操作")])])]),t._v(" "),v("h2",{attrs:{id:"相关分支的操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关分支的操作"}},[t._v("#")]),t._v(" 相关分支的操作")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("git branch <分支名>")]),t._v(" 创建分支")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git branch -v")]),t._v(" 查看所有分支")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git checkout <分支名>")]),t._v(" 切换分支")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git checkout -b <分支名>")]),t._v(" 创建并切换到新的分支")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git branch -D <分支名>")]),t._v(" 删除分支")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git merge <分支名>")]),t._v(" 合并目标分支到当前分支")])])]),t._v(" "),v("h2",{attrs:{id:"ssh-的配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ssh-的配置"}},[t._v("#")]),t._v(" SSH 的配置")]),t._v(" "),v("ol",[v("li",[t._v("先检查下电脑是否配置了用户信息 "),v("code",[t._v("git config --global --list")])])]),t._v(" "),v("p",[t._v("如果没有配置， 则执行一下命令进行配置")]),t._v(" "),v("div",{staticClass:"language-git line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-git"}},[v("code",[t._v("git config --global  user.name "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这里换上你的用户名"')]),t._v("\ngit config --global user.email "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这里换上你的邮箱"')]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br")])]),v("ol",{attrs:{start:"2"}},[v("li",[t._v("在本地电脑 通过 git bash 打开执行 "),v("code",[t._v('ssh-keygen -t rsa -C "这里换上你的邮箱"')])])]),t._v(" "),v("p",[t._v("执行命令后直接回车 3 次即可，不需要去输入密码")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("p",[t._v("可以通过 "),v("code",[t._v("cat ~/.ssh/id_rsa.pub")]),t._v(" 查看生成的公钥 或者 在电脑的 C 盘/用户文件夹下 找到 .ssh 文件夹 打开可以看到 id_rsa 和 id_rsa.pub 的文件。 id_rsa.pub 是公钥文件")])]),t._v(" "),v("li",[v("p",[t._v("进入自己的 Github 到 Settings 找到 "),v("strong",[t._v("SSH and GPG keys")]),t._v(" 点击 "),v("strong",[t._v("New SSH key")]),t._v(" 按钮。 输入 title 和 公钥 Key 即可。")])])]),t._v(" "),v("h2",{attrs:{id:"为远程库设置别名"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为远程库设置别名"}},[t._v("#")]),t._v(" 为远程库设置别名")]),t._v(" "),v("p",[v("code",[t._v("git remote add <别名> <HTTPS_URL|SSH_URL>")])]),t._v(" "),v("p",[t._v("设置后可以通过 "),v("code",[t._v("git push -u 别名 master")]),t._v(" 推送（本地当前分支）到远程仓库的 master 分支")]),t._v(" "),v("h2",{attrs:{id:"远程库相关命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#远程库相关命令"}},[t._v("#")]),t._v(" 远程库相关命令")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("git push <别名/地址名> <分支名>")]),t._v(" 推送本地库到远程库")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git clone <别名/地址名>")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git pull <别名/远程库地址名> <远程库分支名>")]),t._v(" 将远程库新增/修改内容拉取到本地库并合并")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git fetch <别名/远程库地址名> <远程库分支名>")]),t._v(" 将远程库新增/修改内容拉取到本地库")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git merge <别名/远程分支名>")]),t._v(" 将 fetch 下来的内容合并起来")])])]),t._v(" "),v("h2",{attrs:{id:"查看提交记录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看提交记录"}},[t._v("#")]),t._v(" 查看提交记录")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("git log")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git reflog")])])])]),t._v(" "),v("h2",{attrs:{id:"git-忽略文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略文件"}},[t._v("#")]),t._v(" git 忽略文件")]),t._v(" "),v("ol",[v("li",[t._v("在本地仓库中创建 .gitignore 文件并且编辑")])]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("*.xx：   表示忽略文件名 xx 结尾的文件\n! *.xx： 表示git只管理以xx结尾的文件\n/files： 表示忽略files文件夹下所有文件\n文件名： 表示忽略指定的文件\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br")])]),v("h2",{attrs:{id:"git-常用命令汇总"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令汇总"}},[t._v("#")]),t._v(" git 常用命令汇总")]),t._v(" "),v("blockquote",[v("p",[t._v("相关命令的使用 参考"),v("a",{attrs:{href:"https://www.runoob.com/git/git-basic-operations.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("菜鸟教程"),v("OutboundLink")],1)])]),t._v(" "),v("h3",{attrs:{id:"创建仓库命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建仓库命令"}},[t._v("#")]),t._v(" 创建仓库命令")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("git init")]),t._v(" 初始化仓库")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git clone")]),t._v(" 下载一份项目")])])]),t._v(" "),v("h3",{attrs:{id:"提交与修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提交与修改"}},[t._v("#")]),t._v(" 提交与修改")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("git add")]),t._v(" 添加文件仓库")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git status")]),t._v(" 查看本地仓库当前状态")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git diff")]),t._v(" 比较文件的不同，即暂存区 和 工作区的差异")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git commit")]),t._v(" 提交暂存区到本地仓库")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git reset")]),t._v(" 回退版本")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git rm")]),t._v(" 删除工作区文件")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git mv")]),t._v(" 移动或重命名工作区文件")])])]),t._v(" "),v("h3",{attrs:{id:"提交日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提交日志"}},[t._v("#")]),t._v(" 提交日志")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("git log")]),t._v(" 查看历史提交记录")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git blame <file>")]),t._v(" 以列表形式查看指定文件的历史修改记录")])])]),t._v(" "),v("h3",{attrs:{id:"远程操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#远程操作"}},[t._v("#")]),t._v(" 远程操作")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("git remote")]),t._v(" 远程仓库操作")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git fetch")]),t._v(" 从远程获取代码库")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git pull")]),t._v(" 下载远程代码并且合并")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("git push")]),t._v(" 上传远程代码并且合并")])])])])}),[],!1,null,null,null);_.default=a.exports}}]);